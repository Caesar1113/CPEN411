#include "ooo_cpu.h"

#define TABLE_SIZE 16384
#define PRIME 8191//16381
#define MAX_COUNTER 3
int table[NUM_CPUS][TABLE_SIZE/2];
int tableNo[NUM_CPUS][TABLE_SIZE/2];
int tableYes[NUM_CPUS][TABLE_SIZE/2];
int prev_taken=0;
int hash_yes=0;
int hash_no=0;
int history[NUM_CPUS];

void O3_CPU::initialize_branch_predictor()
{
    cout << "CPU " << cpu << " Branch predictor" << endl;

    for(int i = 0; i < TABLE_SIZE/2; i++){
        tableNo[cpu][i] = 0;
        tableYes[cpu][i] = 0;
        history[cpu]=0;
    }
}

uint8_t O3_CPU::predict_branch(uint64_t ip)
{
    uint32_t hash = ip % PRIME;
    uint8_t prediction = 0;

    //---- FILL THE PART BELOW THIS ----//

    if((history[cpu])==0){
    if(tableNo[cpu][hash]>1){
        prediction =1;
    }
    else {
        prediction=0;
    }

}
    else{
    if(tableYes[cpu][hash]>1){
        prediction =1;
    }
    else {
        prediction=0;
    }
    }
    
    //---- FILL THE PART ABOVE THIS ----//
	
    return prediction;
}

void O3_CPU::last_branch_result(uint64_t ip, uint8_t taken)
{
    uint32_t hash = ip % PRIME;//last 14 bit
    //---- FILL THE PART BELOW THIS ----//


if((history[cpu])==0){
    if(taken){
        tableNo[cpu][hash] ++;
    }
    else{
        tableNo[cpu][hash] --;
    }
    if(tableNo[cpu][hash]>MAX_COUNTER){
        tableNo[cpu][hash]=MAX_COUNTER;
    }
    else if(tableNo[cpu][hash]<0){
        tableNo[cpu][hash]=0;
    }
} else{
    if(taken){
        tableYes[cpu][hash] ++;
    }
    else{
        tableYes[cpu][hash] --;
    }
    if(tableYes[cpu][hash]>MAX_COUNTER){
        tableYes[cpu][hash]=MAX_COUNTER;
    }
    else if(tableYes[cpu][hash]<0){
        tableYes[cpu][hash]=0;
    }
}
    (history[cpu])=taken;
    //---- FILL THE PART ABOVE THIS ----//
    return;
}
