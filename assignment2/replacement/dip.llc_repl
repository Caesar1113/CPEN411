//--- Implementing the Dynamic Insertion Policy ---//
#include "cache.h"
#include <iostream>
#include <random>
// initialize replacement state
extern int psel=0;
extern int i=0;



void CACHE::llc_initialize_replacement()
{

}

// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
return lru_victim(cpu, instr_id, set, current_set, ip, full_addr, type); 
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{
string TYPE_NAME;
    if (type == LOAD)
        TYPE_NAME = "LOAD";
    else if (type == RFO)
        TYPE_NAME = "RFO";
    else if (type == PREFETCH)
        TYPE_NAME = "PF";
    else if (type == WRITEBACK)
        TYPE_NAME = "WB";
    else
        assert(0);

    if (hit)
        TYPE_NAME += "_HIT";
    else
        TYPE_NAME += "_MISS";

    if ((type == WRITEBACK) && ip)
        assert(0);

    // uncomment this line to see the LLC accesses
    // cout << "CPU: " << cpu << "  LLC " << setw(9) << TYPE_NAME << " set: " << setw(5) << set << " way: " << setw(2) << way;
    // cout << hex << " paddr: " << setw(12) << paddr << " ip: " << setw(8) << ip << " victim_addr: " << victim_addr << dec << endl;

while(i<64){

//...................................<64 use lru 
    if (hit){ 
        return;
    }
    else{
      psel=psel-1;
      return lru_update(set, way);
    }
i++;
}

while(64<=i<128){
    i++;
    int rand_n=0; 
    rand_n=(rand() % (100-1+1))+1;      //b=100,a=1 
        if(rand_n<=5)
            {
          if (hit){ // writeback hit does not update LRU state
                return;}
                else
                {
               psel=psel+1;
                return lru_update(set, way);
                }
            }else
            {
                if (hit){ 
                   return lru_update(set, way);}
                else{
                psel=psel+1;
                return;
                }
            }
}
while(i>=128){
    if(psel>=0){
        if (hit){ 
            return;
        }
        else{
        psel=psel-1;
        return lru_update(set, way);
        }
    }
    else{
        int rand_n=0; 
        rand_n=(rand() % (100-1+1))+1;      //b=100,a=1 
           if(rand_n<=5)
                {
             if (hit){ // writeback hit does not update LRU state
                   return;}
                  else
                  {
                 psel=psel+1;
                  return lru_update(set, way);
                 }
             }else
                {
                    if (hit){ 
                      return lru_update(set, way);}
                    else{
                        psel=psel+1;
                    return;
                   }
            }

    }
}





}

void CACHE::llc_replacement_final_stats()
{

}
