//--- Implementing the Pseudo-Tree-Based LRU Replacement Policy ---//

#include "cache.h"
int tree[LLC_SET][LLC_WAY];//8ways 
extern int sum=0;
// initialize replacement state
void CACHE::llc_initialize_replacement()
{
    for (int i=0; i<LLC_SET; i++) {
        for (int j=0; j<8; j++) {
            tree[i][j] = 0;
        }
    }
}

// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
    int way;
    for (way = 0; way < NUM_WAY; way++) {      
        if(tree[set][way] == 1)
            sum++;
        else 
            sum=sum;
        }
    for (way = 0; way < NUM_WAY; way++) {
        
        // if bit is 0 and not the last bit
        if(tree[set][way] == 0 && (sum <(NUM_WAY - 1))){
            tree[set][way] = 1; 
//            sum=0;
            return way;
        }
 //       else if(tree[set][way] == 0 && way == (NUM_WAY - 1)){
        else{
            for (int i=0; i<NUM_WAY; i++){
                tree[set][i] = 0;
            }
            tree[set][way] = 1;
            sum=0;
            return way;
        }
    }
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{
string TYPE_NAME;
    if (type == LOAD)
        TYPE_NAME = "LOAD";
    else if (type == RFO)
        TYPE_NAME = "RFO";
    else if (type == PREFETCH)
        TYPE_NAME = "PF";
    else if (type == WRITEBACK)
        TYPE_NAME = "WB";
    else
        assert(0);

    if (hit)
        TYPE_NAME += "_HIT";
    else
        TYPE_NAME += "_MISS";

    if ((type == WRITEBACK) && ip)
        assert(0);

    if (hit && (type == WRITEBACK)) // writeback hit does not update LRU state
        return;

    return lru_update(set, way);
}

void CACHE::llc_replacement_final_stats()
{

}
